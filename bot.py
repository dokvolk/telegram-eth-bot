–û—Å—å –∫–æ–¥ –∑ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç—É "Telegram Bot –¥–ª—è ETH"! üëá
–ö–æ–¥ –∑–Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –≤ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç—ñ –∑ –Ω–∞–∑–≤–æ—é "Telegram Bot –¥–ª—è ETH –ú–µ–≥–∞-–∫–æ–º–±—ñ–Ω–∞—Ü—ñ–π" (ID: telegram_bot_integration).
–û—Å—å –ø–æ–≤–Ω–∏–π –∫–æ–¥, —è–∫–∏–π –ø–æ—Ç—Ä—ñ–±–Ω–æ —Å–∫–æ–ø—ñ—é–≤–∞—Ç–∏:
python"""
Telegram Bot –¥–ª—è ETH –ú–µ–≥–∞-–∫–æ–º–±—ñ–Ω–∞—Ü—ñ–π
–û—Ç—Ä–∏–º—É–π—Ç–µ –º–∏—Ç—Ç—î–≤—ñ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—Ä–æ –≤—Å—ñ 5 –º–µ–≥–∞-–∫–æ–º–±—ñ–Ω–∞—Ü—ñ–π –ø—Ä—è–º–æ –≤ Telegram!

–§—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª:
- –ú–∏—Ç—Ç—î–≤—ñ –∞–ª–µ—Ä—Ç–∏ –∑ TradingView
- –ö–æ–º–∞–Ω–¥–∏ –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
- –Ü—Å—Ç–æ—Ä—ñ—è —Å–∏–≥–Ω–∞–ª—ñ–≤
- –ì—Ä–∞—Ñ—ñ–∫–∏ —Ç–∞ –∞–Ω–∞–ª—ñ—Ç–∏–∫–∞
"""

import os
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, ContextTypes, CallbackQueryHandler
from datetime import datetime
import json
from collections import defaultdict

# ============================================================================
# –ù–ê–õ–ê–®–¢–£–í–ê–ù–ù–Ø
# ============================================================================

# –û—Ç—Ä–∏–º–∞–π—Ç–µ —Ç–æ–∫–µ–Ω –≤—ñ–¥ @BotFather –≤ Telegram
TELEGRAM_BOT_TOKEN = "YOUR_BOT_TOKEN_HERE"  # ‚¨ÖÔ∏è –ó–ê–ú–Ü–ù–Ü–¢–¨ –ù–ê –í–ê–® –¢–û–ö–ï–ù!

# –ë–∞–∑–∞ –¥–∞–Ω–∏—Ö —Å–∏–≥–Ω–∞–ª—ñ–≤ (–≤ —Ä–µ–∞–ª—å–Ω–æ–º—É –¥–æ–¥–∞—Ç–∫—É –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –ë–î)
signals_db = []
user_stats = defaultdict(lambda: {
    'total_signals': 0,
    'by_combo': defaultdict(int),
    'subscribed': True
})

# ============================================================================
# –û–°–ù–û–í–ù–Ü –ö–û–ú–ê–ù–î–ò
# ============================================================================

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /start - –ø—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è"""
    user_id = update.effective_user.id
    user_name = update.effective_user.first_name
    
    welcome_message = f"""
üî• **–í—ñ—Ç–∞—î–º–æ, {user_name}!**

–¶–µ –±–æ—Ç –¥–ª—è –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è 5 –Ω–∞–π–ø–æ—Ç—É–∂–Ω—ñ—à–∏—Ö —Ç–æ—Ä–≥–æ–≤–∏—Ö –∫–æ–º–±—ñ–Ω–∞—Ü—ñ–π ETH/USDT!

**üìä –î–æ—Å—Ç—É–ø–Ω—ñ –∫–æ–º–±—ñ–Ω–∞—Ü—ñ—ó:**
‚ö° –Ü–¥–µ–∞–ª—å–Ω–∏–π —à—Ç–æ—Ä–º (75-85%)
üéØ –°–Ω–∞–π–ø–µ—Ä—Å—å–∫–∏–π –ø—Ä–æ–±—ñ–π (72-80%)
üìâ –†–æ–∑–≤–æ—Ä–æ—Ç –º–∞–≥–Ω–∞—Ç–∞ (70-78%)
üåä –ó–æ–ª–æ—Ç–∞ —Ö–≤–∏–ª—è (68-76%)
üí• –ö–∞–ø—ñ—Ç—É–ª—è—Ü—ñ—è+ (70-77%)

**ü§ñ –ö–æ–º–∞–Ω–¥–∏:**
/help - –î–æ–ø–æ–º–æ–≥–∞
/stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏–≥–Ω–∞–ª—ñ–≤
/history - –Ü—Å—Ç–æ—Ä—ñ—è –∑–∞ 7 –¥–Ω—ñ–≤
/settings - –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
/subscribe - –ü—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—å –Ω–∞ –∞–ª–µ—Ä—Ç–∏
/unsubscribe - –í—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—å

–ì–æ—Ç–æ–≤—ñ –æ—Ç—Ä–∏–º—É–≤–∞—Ç–∏ —Å–∏–≥–Ω–∞–ª–∏? üöÄ
–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ /subscribe
"""
    
    keyboard = [
        [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data='stats'),
         InlineKeyboardButton("‚öôÔ∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è", callback_data='settings')],
        [InlineKeyboardButton("üîî –ü—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—å", callback_data='subscribe'),
         InlineKeyboardButton("üìñ –î–æ–ø–æ–º–æ–≥–∞", callback_data='help')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(welcome_message, reply_markup=reply_markup, parse_mode='Markdown')


async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /help - –¥–æ–≤—ñ–¥–∫–∞"""
    help_text = """
üìñ **–î–û–í–Ü–î–ö–ê**

**–û—Å–Ω–æ–≤–Ω—ñ –∫–æ–º–∞–Ω–¥–∏:**

/start - –ü–æ—á–∞—Ç–∏ —Ä–æ–±–æ—Ç—É –∑ –±–æ—Ç–æ–º
/stats - –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–∏–≥–Ω–∞–ª—ñ–≤
/history - –Ü—Å—Ç–æ—Ä—ñ—è —Å–∏–≥–Ω–∞–ª—ñ–≤ –∑–∞ –æ—Å—Ç–∞–Ω–Ω—ñ 7 –¥–Ω—ñ–≤
/settings - –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Å–ø–æ–≤—ñ—â–µ–Ω—å
/subscribe - –£–≤—ñ–º–∫–Ω—É—Ç–∏ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è
/unsubscribe - –í–∏–º–∫–Ω—É—Ç–∏ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è

**–ß–∞—Å—Ç–æ—Ç–∞ —Å–∏–≥–Ω–∞–ª—ñ–≤:**
2-3 –Ω–∞ –º—ñ—Å—è—Ü—å (24-40 –Ω–∞ —Ä—ñ–∫)

**–û—á—ñ–∫—É–≤–∞–Ω–∏–π ROI:**
60-70% –Ω–∞ —Ä—ñ–∫ –±–µ–∑ –ª–µ–≤–µ—Ä—ñ–¥–∂—É
"""
    
    await update.message.reply_text(help_text, parse_mode='Markdown')


async def stats_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /stats - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"""
    user_id = update.effective_user.id
    stats = user_stats[user_id]
    
    total_signals = len(signals_db)
    
    combo_counts = defaultdict(int)
    for signal in signals_db:
        combo_counts[signal.get('combo', 'Unknown')] += 1
    
    stats_text = f"""
üìä **–°–¢–ê–¢–ò–°–¢–ò–ö–ê –°–ò–ì–ù–ê–õ–Ü–í**

**–ó–∞–≥–∞–ª—å–Ω–∞:**
–í—Å—å–æ–≥–æ —Å–∏–≥–Ω–∞–ª—ñ–≤: {total_signals}
–í–∞—à—ñ —Å–∏–≥–Ω–∞–ª–∏: {stats['total_signals']}

**–ü–æ –∫–æ–º–±—ñ–Ω–∞—Ü—ñ—è—Ö:**
‚ö° –Ü–¥–µ–∞–ª—å–Ω–∏–π —à—Ç–æ—Ä–º: {combo_counts.get('–Ü–î–ï–ê–õ–¨–ù–ò–ô –®–¢–û–†–ú', 0)}
üéØ –°–Ω–∞–π–ø–µ—Ä—Å—å–∫–∏–π –ø—Ä–æ–±—ñ–π: {combo_counts.get('–°–ù–ê–ô–ü–ï–†–°–¨–ö–ò–ô –ü–†–û–ë–Ü–ô', 0)}
üìâ –†–æ–∑–≤–æ—Ä–æ—Ç –º–∞–≥–Ω–∞—Ç–∞: {combo_counts.get('–†–û–ó–í–û–†–û–¢ –ú–ê–ì–ù–ê–¢–ê', 0)}
üåä –ó–æ–ª–æ—Ç–∞ —Ö–≤–∏–ª—è: {combo_counts.get('–ó–û–õ–û–¢–ê –•–í–ò–õ–Ø', 0)}
üí• –ö–∞–ø—ñ—Ç—É–ª—è—Ü—ñ—è+: {combo_counts.get('–ö–ê–ü–Ü–¢–£–õ–Ø–¶–Ü–Ø+', 0)}

**–°—Ç–∞—Ç—É—Å –ø—ñ–¥–ø–∏—Å–∫–∏:**
{'‚úÖ –ê–∫—Ç–∏–≤–Ω–∞' if stats['subscribed'] else '‚ùå –ù–µ–∞–∫—Ç–∏–≤–Ω–∞'}
"""
    
    await update.message.reply_text(stats_text, parse_mode='Markdown')


async def history_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /history - —ñ—Å—Ç–æ—Ä—ñ—è —Å–∏–≥–Ω–∞–ª—ñ–≤"""
    
    if not signals_db:
        await update.message.reply_text("üì≠ –Ü—Å—Ç–æ—Ä—ñ—è –ø–æ—Ä–æ–∂–Ω—è. –û—á—ñ–∫—É—î–º–æ –ø–µ—Ä—à–∏—Ö —Å–∏–≥–Ω–∞–ª—ñ–≤!")
        return
    
    recent_signals = signals_db[-10:]
    
    history_text = "üìà **–Ü–°–¢–û–†–Ü–Ø –°–ò–ì–ù–ê–õ–Ü–í** (–æ—Å—Ç–∞–Ω–Ω—ñ 10)\n\n"
    
    for i, signal in enumerate(reversed(recent_signals), 1):
        emoji = {
            '–Ü–î–ï–ê–õ–¨–ù–ò–ô –®–¢–û–†–ú': '‚ö°',
            '–°–ù–ê–ô–ü–ï–†–°–¨–ö–ò–ô –ü–†–û–ë–Ü–ô': 'üéØ',
            '–†–û–ó–í–û–†–û–¢ –ú–ê–ì–ù–ê–¢–ê': 'üìâ',
            '–ó–û–õ–û–¢–ê –•–í–ò–õ–Ø': 'üåä',
            '–ö–ê–ü–Ü–¢–£–õ–Ø–¶–Ü–Ø+': 'üí•'
        }.get(signal.get('combo', ''), 'üîî')
        
        history_text += f"""
{i}. {emoji} **{signal.get('combo', 'Unknown')}**
   üí∞ –¶—ñ–Ω–∞: ${signal.get('price', 0):.2f}
   üìä RSI: {signal.get('rsi', 0):.1f}
   ‚è∞ {signal.get('time', 'N/A')}
   {'‚îÄ' * 30}
"""
    
    await update.message.reply_text(history_text, parse_mode='Markdown')


async def subscribe_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /subscribe - –ø—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—å"""
    user_id = update.effective_user.id
    user_stats[user_id]['subscribed'] = True
    
    await update.message.reply_text(
        "‚úÖ **–ü—ñ–¥–ø–∏—Å–∫—É –∞–∫—Ç–∏–≤–æ–≤–∞–Ω–æ!**\n\n"
        "–¢–µ–ø–µ—Ä –≤–∏ –æ—Ç—Ä–∏–º—É–≤–∞—Ç–∏–º–µ—Ç–µ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—Ä–æ –≤—Å—ñ –º–µ–≥–∞-–∫–æ–º–±—ñ–Ω–∞—Ü—ñ—ó.\n\n"
        "–û—á—ñ–∫—É–≤–∞–Ω–∞ —á–∞—Å—Ç–æ—Ç–∞: 2-3 —Å–∏–≥–Ω–∞–ª–∏ –Ω–∞ –º—ñ—Å—è—Ü—å\n"
        "–î–ª—è –≤—ñ–¥–ø–∏—Å–∫–∏: /unsubscribe",
        parse_mode='Markdown'
    )


async def unsubscribe_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /unsubscribe - –≤—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—å"""
    user_id = update.effective_user.id
    user_stats[user_id]['subscribed'] = False
    
    await update.message.reply_text(
        "‚ùå **–ü—ñ–¥–ø–∏—Å–∫—É –¥–µ–∞–∫—Ç–∏–≤–æ–≤–∞–Ω–æ**\n\n"
        "–í–∏ –±—ñ–ª—å—à–µ –Ω–µ –æ—Ç—Ä–∏–º—É–≤–∞—Ç–∏–º–µ—Ç–µ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è.\n\n"
        "–î–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ—ó –ø—ñ–¥–ø–∏—Å–∫–∏: /subscribe",
        parse_mode='Markdown'
    )


async def settings_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /settings - –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è"""
    user_id = update.effective_user.id
    stats = user_stats[user_id]
    
    settings_text = f"""
‚öôÔ∏è **–ù–ê–õ–ê–®–¢–£–í–ê–ù–ù–Ø**

**–°—Ç–∞—Ç—É—Å –ø—ñ–¥–ø–∏—Å–∫–∏:**
{'‚úÖ –£–≤—ñ–º–∫–Ω–µ–Ω–æ' if stats['subscribed'] else '‚ùå –í–∏–º–∫–Ω–µ–Ω–æ'}
"""
    
    keyboard = [
        [InlineKeyboardButton("üîî –ü—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—å" if not stats['subscribed'] else "üîï –í—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—å", 
                            callback_data='toggle_subscription')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(settings_text, reply_markup=reply_markup, parse_mode='Markdown')


# ============================================================================
# –û–ë–†–û–ë–ö–ê WEBHOOK –í–Ü–î TRADINGVIEW
# ============================================================================

async def process_tradingview_alert(data: dict, application):
    """–û–±—Ä–æ–±–∫–∞ –≤—Ö—ñ–¥–Ω–æ–≥–æ —Å–∏–≥–Ω–∞–ª—É –≤—ñ–¥ TradingView"""
    
    signal = {
        'combo': data.get('combo', 'Unknown'),
        'ticker': data.get('ticker', 'ETH/USDT'),
        'price': float(data.get('price', 0)),
        'rsi': float(data.get('rsi', 0)),
        'time': data.get('timestamp', datetime.now().strftime('%Y-%m-%d %H:%M:%S'))
    }
    signals_db.append(signal)
    
    combo_emoji = {
        '–Ü–î–ï–ê–õ–¨–ù–ò–ô –®–¢–û–†–ú': '‚ö°',
        '–°–ù–ê–ô–ü–ï–†–°–¨–ö–ò–ô –ü–†–û–ë–Ü–ô': 'üéØ',
        '–†–û–ó–í–û–†–û–¢ –ú–ê–ì–ù–ê–¢–ê': 'üìâ',
        '–ó–û–õ–û–¢–ê –•–í–ò–õ–Ø': 'üåä',
        '–ö–ê–ü–Ü–¢–£–õ–Ø–¶–Ü–Ø+': 'üí•'
    }
    
    emoji = combo_emoji.get(signal['combo'], 'üîî')
    
    alert_message = f"""
üö® **–ù–û–í–ò–ô –°–ò–ì–ù–ê–õ!** üö®

{emoji} **{signal['combo']}**

üí∞ **–¶—ñ–Ω–∞:** ${signal['price']:.2f}
üìä **RSI:** {signal['rsi']:.1f}
üìà **–ü–∞—Ä–∞:** {signal['ticker']}
‚è∞ **–ß–∞—Å:** {signal['time']}

{'‚îÄ' * 30}

üìå **–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó:**
"""
    
    if signal['combo'] == '–Ü–î–ï–ê–õ–¨–ù–ò–ô –®–¢–û–†–ú':
        alert_message += """
‚úÖ –°–∏–ª—å–Ω–∏–π –±–∏—á–∞—á–∏–π —Å–∏–≥–Ω–∞–ª
üéØ –¢–æ—á–Ω—ñ—Å—Ç—å: 75-85%
üíº –†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–∏–π –≤—Ö—ñ–¥: 3-5% –∫–∞–ø—ñ—Ç–∞–ª—É
üõ°Ô∏è –°—Ç–æ–ø-–ª–æ—Å: -2.5%
üéÅ –¢–µ–π–∫-–ø—Ä–æ—Ñ—ñ—Ç: +7-10%
"""
    elif signal['combo'] == '–°–ù–ê–ô–ü–ï–†–°–¨–ö–ò–ô –ü–†–û–ë–Ü–ô':
        alert_message += """
‚úÖ –Ü–º–ø—É–ª—å—Å–Ω–∏–π –ø—Ä–æ–±—ñ–π
üéØ –¢–æ—á–Ω—ñ—Å—Ç—å: 72-80%
üíº –®–≤–∏–¥–∫–∏–π —Ç—Ä–µ–π–¥
üõ°Ô∏è –°—Ç–æ–ø-–ª–æ—Å: -2%
üéÅ –¢–µ–π–∫-–ø—Ä–æ—Ñ—ñ—Ç: +5-7%
"""
    
    alert_message += "\n\n‚ö° –î—ñ—è–π—Ç–µ —à–≤–∏–¥–∫–æ! –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ —Å—Ç–æ–ø-–ª–æ—Å–∏!"
    
    for user_id, stats in user_stats.items():
        if stats['subscribed']:
            try:
                await application.bot.send_message(
                    chat_id=user_id,
                    text=alert_message,
                    parse_mode='Markdown'
                )
                stats['total_signals'] += 1
                stats['by_combo'][signal['combo']] += 1
            except Exception as e:
                print(f"Error sending to user {user_id}: {e}")


# ============================================================================
# –û–ë–†–û–ë–ö–ê –ö–ù–û–ü–û–ö
# ============================================================================

async def button_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–æ–±–∫–∞ –Ω–∞—Ç–∏—Å–∫–∞–Ω—å –Ω–∞ –∫–Ω–æ–ø–∫–∏"""
    query = update.callback_query
    await query.answer()
    
    user_id = update.effective_user.id
    
    if query.data == 'subscribe':
        user_stats[user_id]['subscribed'] = True
        await query.edit_message_text("‚úÖ –ü—ñ–¥–ø–∏—Å–∫—É –∞–∫—Ç–∏–≤–æ–≤–∞–Ω–æ!")
    elif query.data == 'toggle_subscription':
        user_stats[user_id]['subscribed'] = not user_stats[user_id]['subscribed']
        status = "‚úÖ –£–≤—ñ–º–∫–Ω–µ–Ω–æ" if user_stats[user_id]['subscribed'] else "‚ùå –í–∏–º–∫–Ω–µ–Ω–æ"
        await query.edit_message_text(f"–ü—ñ–¥–ø–∏—Å–∫–∞: {status}")


# ============================================================================
# FLASK –°–ï–†–í–ï–† –î–õ–Ø WEBHOOK
# ============================================================================

from flask import Flask, request
import asyncio

flask_app = Flask(__name__)
telegram_app = None

@flask_app.route('/webhook', methods=['POST'])
def webhook():
    """Endpoint –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∞–ª–µ—Ä—Ç—ñ–≤ –≤—ñ–¥ TradingView"""
    try:
        data = request.json
        
        if telegram_app:
            asyncio.run(process_tradingview_alert(data, telegram_app))
        
        return {'status': 'success'}, 200
    except Exception as e:
        print(f"Webhook error: {e}")
        return {'status': 'error', 'message': str(e)}, 500


@flask_app.route('/health', methods=['GET'])
def health():
    """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤'—è —Å–µ—Ä–≤–µ—Ä–∞"""
    return {'status': 'ok', 'signals': len(signals_db)}, 200


# ============================================================================
# –ó–ê–ü–£–°–ö –ë–û–¢–ê
# ============================================================================

def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –∑–∞–ø—É—Å–∫—É"""
    global telegram_app
    
    print("ü§ñ –ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞...")
    
    telegram_app = Application.builder().token(TELEGRAM_BOT_TOKEN).build()
    
    telegram_app.add_handler(CommandHandler("start", start))
    telegram_app.add_handler(CommandHandler("help", help_command))
    telegram_app.add_handler(CommandHandler("stats", stats_command))
    telegram_app.add_handler(CommandHandler("history", history_command))
    telegram_app.add_handler(CommandHandler("subscribe", subscribe_command))
    telegram_app.add_handler(CommandHandler("unsubscribe", unsubscribe_command))
    telegram_app.add_handler(CommandHandler("settings", settings_command))
    telegram_app.add_handler(CallbackQueryHandler(button_callback))
    
    print("‚úÖ –ë–æ—Ç –≥–æ—Ç–æ–≤–∏–π –¥–æ —Ä–æ–±–æ—Ç–∏!")
    print("üì± –ó–Ω–∞–π–¥—ñ—Ç—å —Å–≤–æ–≥–æ –±–æ—Ç–∞ –≤ Telegram —Ç–∞ –≤—ñ–¥–ø—Ä–∞–≤—Ç–µ /start")
    print("\nüåê –ó–∞–ø—É—Å–∫ Flask —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ –ø–æ—Ä—Ç—É 5000...")
    
    import threading
    
    bot_thread = threading.Thread(target=telegram_app.run_polling)
    bot_thread.daemon = True
    bot_thread.start()
    
    flask_app.run(host='0.0.0.0', port=5000)


if __name__ == '__main__':
    main()
